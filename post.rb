# Базовый класс «Запись» — здесь мы определим основные методы и свойства,
# общие для всех типов записей.
class Post
  # В конструкторе класса определим две переменные экзмепляра: дату создания
  # записи @created_at (текущий момент) и массив строк записи @text (пустой)
  def initialize
    @created_at = Time.now
    @text = nil
  end

  # Этот метод вызывается в программе, когда нужно
  # считать ввод пользователя и записать его в нужные поля объекта
  def read_from_console
  end

  # Этот метод возвращает состояние объекта в виде массива строк, готовых к записи в файл
  def to_strings
  end

  # Этот метод записывает текущее состояние объекта в файл
  def save
    file = File.new(file_path, "w")
    for item in to_strings
      file.puts(item)
    end
    file.close
  end

  def file_path
    curent_path = File.dirname(__FILE__)
    file_name = @created_at.strftime("#{self.class.name}_%Y-%m-%d_%H-%M-%S.txt")
    return.curent_path + "/" + file_name
  end
end

# PS: Весь набор методов, объявленных в родительском классе называется интерфейсом класса
# Дети могут по–разному реализовывать методы, но они должны подчиняться общей идее
# и набору функций, которые заявлены в базовом (родительском классе)
# В других языках (например, Java) методы, объявленные в классе, но пустые
# называются абстрактными (здесь это методы to_strings и read_from_console).
#
# Смысл абстрактных методов в том, что можно писать базовый класс и пользоваться
# этими методами, как будто они уже реализованы, не задумываясь о деталях. С
# деталями реализации методов уже заморачиваются дочерние классы.
